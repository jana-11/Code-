--Project Management system 
Backend
Database Schema Design
-- Create projects table
CREATE TABLE projects (
    project_id INT PRIMARY KEY AUTO_INCREMENT,
    project_name VARCHAR(100) NOT NULL,
    description TEXT,
    start_date DATE,
    end_date DATE
);

-- Create tasks table
CREATE TABLE tasks (
    task_id INT PRIMARY KEY AUTO_INCREMENT,
    project_id INT,
    task_name VARCHAR(100) NOT NULL,
    description TEXT,
    assigned_to INT,
    start_date DATE,
    end_date DATE,
    status ENUM('Not Started', 'In Progress', 'Completed') DEFAULT 'Not Started',
    FOREIGN KEY (project_id) REFERENCES projects(project_id),
    FOREIGN KEY (assigned_to) REFERENCES team_members(member_id)
);

-- Create teams table
CREATE TABLE teams (
    team_id INT PRIMARY KEY AUTO_INCREMENT,
    team_name VARCHAR(100) NOT NULL
);

-- Create team_members table
CREATE TABLE team_members (
    member_id INT PRIMARY KEY AUTO_INCREMENT,
    team_id INT,
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    email VARCHAR(100),
    FOREIGN KEY (team_id) REFERENCES teams(team_id)
);

-- Create timelines table (Gantt chart support)
CREATE TABLE timelines (
    timeline_id INT PRIMARY KEY AUTO_INCREMENT,
    task_id INT,
    start_date DATE,
    end_date DATE,
    FOREIGN KEY (task_id) REFERENCES tasks(task_id)
);

--Restful API design
--Project APIs
const express = require('express');
const router = express.Router();

// Create a new project
router.post('/projects', (req, res) => {
    // Logic to create a project
});

// Update a project
router.put('/projects/:id', (req, res) => {
    // Logic to update a project
});

// Delete a project
router.delete('/projects/:id', (req, res) => {
    // Logic to delete a project
});

// View all projects
router.get('/projects', (req, res) => {
    // Logic to get all projects
});

// View a specific project
router.get('/projects/:id', (req, res) => {
    // Logic to get a specific project
});

--Task APIs

// Create a new task
router.post('/tasks', (req, res) => {
    // Logic to create a task
});

// Update a task
router.put('/tasks/:id', (req, res) => {
    // Logic to update a task
});

// Delete a task
router.delete('/tasks/:id', (req, res) => {
    // Logic to delete a task
});

// View all tasks for a project
router.get('/projects/:projectId/tasks', (req, res) => {
    // Logic to get all tasks for a project
});

// View a specific task
router.get('/tasks/:id', (req, res) => {
    // Logic to get a specific task
});

--Team APIs

// Create a new team
router.post('/teams', (req, res) => {
    // Logic to create a team
});

// Update a team
router.put('/teams/:id', (req, res) => {
    // Logic to update a team
});

// Delete a team
router.delete('/teams/:id', (req, res) => {
    // Logic to delete a team
});

// View all teams
router.get('/teams', (req, res) => {
    // Logic to get all teams
});

// View a specific team
router.get('/teams/:id', (req, res) => {
    // Logic to get a specific team
});

--Team member APIs
// Create a new team member
router.post('/team_members', (req, res) => {
    // Logic to create a team member
});

// Update a team member
router.put('/team_members/:id', (req, res) => {
    // Logic to update a team member
});

// Delete a team member
router.delete('/team_members/:id', (req, res) => {
    // Logic to delete a team member
});

// View all team members for a team
router.get('/teams/:teamId/members', (req, res) => {
    // Logic to get all team members for a team
});

// View a specific team member
router.get('/team_members/:id', (req, res) => {
    // Logic to get a specific team member
});

Frontend
--project list components
import React, { useEffect, useState } from 'react';
import axios from 'axios';

function ProjectList() {
  const [projects, setProjects] = useState([]);

  useEffect(() => {
    axios.get('/api/projects')
      .then(response => setProjects(response.data))
      .catch(error => console.error('Error fetching projects:', error));
  }, []);

  return (
    <div>
      <h1>Projects</h1>
      <ul>
        {projects.map(project => (
          <li key={project.project_id}>
            {project.project_name}
          </li>
        ))}
      </ul>
    </div>
  );
}

export default ProjectList;

--Tasklist Component

import React, { useEffect, useState } from 'react';
import axios from 'axios';

function TaskList({ projectId }) {
  const [tasks, setTasks] = useState([]);

  useEffect(() => {
    axios.get(`/api/projects/${projectId}/tasks`)
      .then(response => setTasks(response.data))
      .catch(error => console.error('Error fetching tasks:', error));
  }, [projectId]);

  return (
    <div>
      <h1>Tasks</h1>
      <ul>
        {tasks.map(task => (
          <li key={task.task_id}>
            {task.task_name}
          </li>
        ))}
      </ul>
    </div>
  );
}

export default TaskList;

--Functionalities
Backend notification logic
const nodemailer = require('nodemailer');

// Create a transporter for email notifications
const transporter = nodemailer.createTransport({
  service: 'gmail',
  auth: {
    user: 'your-email@gmail.com',
    pass: 'your-password'
  }
});

// Function to send a reminder email
function sendReminderEmail(to, subject, text) {
  const mailOptions = {
    from: 'your-email@gmail.com',
    to: to,
    subject: subject,
    text: text
  };

  transporter.sendMail(mailOptions, function(error, info) {
    if (error) {
      console.log('Error sending email:', error);
    } else {
      console.log('Email sent:', info.response);
    }
  });
}

// Example usage
sendReminderEmail('team-member@example.com', 'Task Deadline Reminder', 'You have a task deadline coming up soon.');



